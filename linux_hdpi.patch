From 42ab12832efe026ebedce7653d1300bbff4a8393 Mon Sep 17 00:00:00 2001
From: Mel McCalla <melmccalla@gmail.com>
Date: Mon, 7 Jan 2019 21:48:50 -0800
Subject: [PATCH 1/1] Added high dpi support for Linux platforms

---
 include/cinder/app/Window.h                  |  32 ++---
 include/cinder/app/linux/AppImplLinux.h      |   5 +-
 include/cinder/app/linux/WindowImplLinux.h   |   1 +
 include/glload/_int_glx_type.h               |   3 +-
 include/glload/_int_glx_type.hpp             |   3 +-
 src/cinder/app/Window.cpp                    |  56 +++++----
 src/cinder/app/linux/AppImplLinuxGlfw.cpp    |  54 ++++----
 src/cinder/app/linux/PlatformLinux.cpp       | 125 +++++++++++++------
 src/cinder/app/linux/WindowImplLinuxGlfw.cpp |  28 +++--
 src/cinder/app/linux/WindowImplLinuxRpi.cpp  |   4 +
 src/cinder/params/Params.cpp                 |  91 ++++++++------
 11 files changed, 243 insertions(+), 159 deletions(-)

diff --git a/include/cinder/app/Window.h b/include/cinder/app/Window.h
index bd4b1503c..dbba19b93 100644
--- a/include/cinder/app/Window.h
+++ b/include/cinder/app/Window.h
@@ -305,7 +305,7 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 	//! Returns a vec2 mapped from points to pixels by multiplying by getContentScale()
 	vec2	toPixels( vec2 s ) const { return s * getContentScale(); }
 	//! Returns a ivec2 mapped from points to pixels by multiplying by getContentScale()
-	ivec2	toPixels( ivec2 s ) const { return ivec2( (int32_t)(s.x * getContentScale()), (int32_t)(s.y * getContentScale()) ); }	
+	ivec2	toPixels( ivec2 s ) const { return ivec2( (int32_t)(s.x * getContentScale()), (int32_t)(s.y * getContentScale()) ); }
 	//! Returns an Area mapped from points to pixels by multiplying by getContentScale()
 	Area	toPixels( const Area &a ) const { const float s = getContentScale(); return Area( (int32_t)(a.x1 * s), (int32_t)(a.y1 * s), (int32_t)(a.x2 * s), (int32_t)(a.y2 * s) ); }
 	//! Returns a Rectf mapped from points to pixels by multiplying by getContentScale()
@@ -317,17 +317,17 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 	//! Returns a vec2 mapped from pixels to points by dividing by getContentScale()
 	vec2	toPoints( vec2 s ) const { return s / getContentScale(); }
 	//! Returns a ivec2 mapped from pixels to points by dividing by getContentScale()
-	ivec2	toPoints( ivec2 s ) const { return ivec2( (int32_t)(s.x / getContentScale()), (int32_t)(s.y / getContentScale()) ); }	
+	ivec2	toPoints( ivec2 s ) const { return ivec2( (int32_t)(s.x / getContentScale()), (int32_t)(s.y / getContentScale()) ); }
 	//! Returns an Area mapped from pixels to points by dividing by getContentScale()
 	Area	toPoints( const Area &a ) const { const float s = 1.0f / getContentScale(); return Area( (int32_t)(a.x1 * s), (int32_t)(a.y1 * s), (int32_t)(a.x2 * s), (int32_t)(a.y2 * s) ); }
 	//! Returns a Rectf mapped from pixels to points by dividing by getContentScale()
 	Rectf	toPoints( const Rectf &a ) const { return a / getContentScale(); }
-	
+
 	//! Returns the Window's title as a UTF-8 string.
 	std::string		getTitle() const;
 	//! Sets the Window's title as a UTF-8 string.
 	void			setTitle( const std::string &title );
-	
+
 	//! Returns whether the window has a border (chrome/frame)
 	bool	isBorderless() const;
 	//! Sets whether the window has a border (chrome/frame)
@@ -427,11 +427,11 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 	//! Sets the window-specific data associated with this Window. The variable is \c deleted upon destruction of the Window.
 	template<typename T>
 	void		setUserData( T *userData ) { mUserData = std::shared_ptr<void>( std::shared_ptr<T>( userData ) ); }
-	
+
 	//! Returns whether this Window is valid. \c false means it should no longer be used (neither read nor write)
 	bool	isValid() const { return mValid; }
 	void	setInvalid() { mValid = false; }
-	
+
 	//! \cond
 	// This should not be called except by App implementations
 #if defined( CINDER_COCOA ) && defined( __OBJC__ )
@@ -451,22 +451,22 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 		WindowRef result( new Window );
 		result->setImpl( impl );
 		result->setApp( app );
-		
+
 		return result;
 	}
 	//! \endcond
 
 	AppBase*			getApp() const { return mApp; }
-	
+
   protected:
 	Window() : mValid( true ), mImpl( 0 ) {}
-  
+
 	void	testValid() const {
 		if( ! mValid )
 			throw ExcInvalidWindow();
 	}
 
-	void		setApp( AppBase *app ) { mApp = app; }	
+	void		setApp( AppBase *app ) { mApp = app; }
 
 #if defined( CINDER_COCOA )
   #if defined( __OBJC__ )
@@ -479,21 +479,21 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 #elif defined( CINDER_UWP )
 	void		setImpl( WindowImplWinRt *impl ) { mImpl = impl; }
 #elif defined( CINDER_ANDROID )
-  void    setImpl( WindowImplAndroid *impl ) { mImpl = impl; }    
+  void    setImpl( WindowImplAndroid *impl ) { mImpl = impl; }
 #elif defined( CINDER_LINUX )
-  void    setImpl( WindowImplLinux *impl ) { mImpl = impl; }    
+  void    setImpl( WindowImplLinux *impl ) { mImpl = impl; }
 #endif
 
 	AppBase							*mApp;
 	bool						mValid;
 	std::shared_ptr<void>		mUserData;
-	
+
 	EventSignalMouse		mSignalMouseDown, mSignalMouseDrag, mSignalMouseUp, mSignalMouseWheel, mSignalMouseMove;
 	EventSignalTouch		mSignalTouchesBegan, mSignalTouchesMoved, mSignalTouchesEnded;
 	EventSignalKey			mSignalKeyDown, mSignalKeyUp;
 	EventSignalWindow		mSignalDraw, mSignalPostDraw, mSignalMove, mSignalResize, mSignalDisplayChange, mSignalClose;
 	EventSignalFileDrop		mSignalFileDrop;
-	
+
 #if defined( CINDER_COCOA )
   #if defined( __OBJC__ )
 	id<WindowImplCocoa>		mImpl;
@@ -509,7 +509,7 @@ class CI_API Window : public std::enable_shared_from_this<Window> {
 #elif defined( CINDER_LINUX )
 	WindowImplLinux		*mImpl;
 #endif
- 
+
 private:
 #if defined( CINDER_ANDROID )
 	friend class AppImplAndroid;
@@ -517,7 +517,7 @@ private:
 #elif defined( CINDER_LINUX )
 	friend class AppImplLinux;
 	WindowImplLinux     *getImpl() { return mImpl; }
-#endif    
+#endif
 };
 
 } } // namespace cinder::app
diff --git a/include/cinder/app/linux/AppImplLinux.h b/include/cinder/app/linux/AppImplLinux.h
index 8ccecaa61..457fe5428 100644
--- a/include/cinder/app/linux/AppImplLinux.h
+++ b/include/cinder/app/linux/AppImplLinux.h
@@ -53,7 +53,7 @@ class AppImplLinux {
 	void						setFrameRate( float aFrameRate );
 	void						disableFrameRate();
 	bool						isFrameRateEnabled() const;
-
+	bool						getHighDensityDisplayEnabled() const;
 
 	WindowRef					getWindow() const;
 	void						setWindow( WindowRef window );
@@ -84,6 +84,9 @@ private:
 
 	float						mFrameRate;
 	bool						mFrameRateEnabled;
+
+	bool						mHighDensityDisplayEnabled;
+
 	bool						mShouldQuit = false;
 
 	bool						mSetupHasBeenCalled = false;
diff --git a/include/cinder/app/linux/WindowImplLinux.h b/include/cinder/app/linux/WindowImplLinux.h
index 9f82180d2..7c743c330 100644
--- a/include/cinder/app/linux/WindowImplLinux.h
+++ b/include/cinder/app/linux/WindowImplLinux.h
@@ -50,6 +50,7 @@ public:
 	virtual void		setSize( const ivec2 &size );
 	virtual ivec2		getPos() const;
 	virtual void		setPos( const ivec2 &pos );
+	virtual float		getContentScale() const;
 	virtual void		close();
 	virtual std::string	getTitle() const { return mTitle; }
 	virtual void		setTitle( const std::string &title );
diff --git a/include/glload/_int_glx_type.h b/include/glload/_int_glx_type.h
index 9e0e14a4e..6025874f4 100644
--- a/include/glload/_int_glx_type.h
+++ b/include/glload/_int_glx_type.h
@@ -1,10 +1,11 @@
 #ifndef GLXWIN_GEN_TYPE_H
 #define GLXWIN_GEN_TYPE_H
-#ifdef __glxext_h_
+#if defined( __glxext_h_) || defined(__glx_glxext_h_)
 #error Attempt to include glx_exts after including glxext.h
 #endif
 
 #define __glxext_h_
+#define __glx_glxext_h_
 
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
diff --git a/include/glload/_int_glx_type.hpp b/include/glload/_int_glx_type.hpp
index 5e3b46649..1794bdb77 100644
--- a/include/glload/_int_glx_type.hpp
+++ b/include/glload/_int_glx_type.hpp
@@ -1,10 +1,11 @@
 #ifndef GLXWIN_GEN_TYPE_HPP
 #define GLXWIN_GEN_TYPE_HPP
-#ifdef __glxext_h_
+#if defined( __glxext_h_) || defined(__glx_glxext_h_)
 #error Attempt to include glx_exts after including glxext.h
 #endif
 
 #define __glxext_h_
+#define __glx_glxext_h_
 
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
diff --git a/src/cinder/app/Window.cpp b/src/cinder/app/Window.cpp
index 26ca4e450..2bd750208 100644
--- a/src/cinder/app/Window.cpp
+++ b/src/cinder/app/Window.cpp
@@ -43,7 +43,7 @@ namespace cinder { namespace app {
 bool Window::isFullScreen() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl isFullScreen];
 #else
@@ -54,7 +54,7 @@ bool Window::isFullScreen() const
 void Window::setFullScreen( bool fullScreen, const FullScreenOptions &options )
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setFullScreen:fullScreen options:&options];
 #else
@@ -65,7 +65,7 @@ void Window::setFullScreen( bool fullScreen, const FullScreenOptions &options )
 ivec2 Window::getSize() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl getSize];
 #else
@@ -76,7 +76,7 @@ ivec2 Window::getSize() const
 void Window::setSize( const ivec2 &size )
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setSize:size];
 #else
@@ -87,7 +87,7 @@ void Window::setSize( const ivec2 &size )
 ivec2 Window::getPos() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl getPos];
 #else
@@ -98,7 +98,7 @@ ivec2 Window::getPos() const
 void Window::setPos( const ivec2 &pos ) const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setPos:pos];
 #else
@@ -109,8 +109,8 @@ void Window::setPos( const ivec2 &pos ) const
 void Window::spanAllDisplays()
 {
 	Area spanning = Display::getSpanningArea();
-	
-	setSize( ivec2( spanning.getWidth(), spanning.getHeight() ) );	
+
+	setSize( ivec2( spanning.getWidth(), spanning.getHeight() ) );
 	setPos( spanning.getUL() );
 }
 
@@ -122,11 +122,13 @@ ivec2 Window::getMousePos() const
 float Window::getContentScale() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl getContentScale];
 #elif defined( CINDER_MSW_DESKTOP )
 	return mImpl->getContentScale();
+#elif defined( CINDER_LINUX )
+	return mImpl->getContentScale();
 #else
 	return 1.0f;
 #endif
@@ -135,7 +137,7 @@ float Window::getContentScale() const
 void Window::close()
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl close];
 #else
@@ -146,7 +148,7 @@ void Window::close()
 std::string	Window::getTitle() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	NSString *title = [mImpl getTitle];
 	return title ? std::string( [title cStringUsingEncoding:NSUTF8StringEncoding] ) : std::string();
@@ -158,7 +160,7 @@ std::string	Window::getTitle() const
 void Window::setTitle( const std::string &title )
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setTitle:[NSString stringWithUTF8String:title.c_str()]];
 #else
@@ -169,7 +171,7 @@ void Window::setTitle( const std::string &title )
 bool Window::isBorderless() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl isBorderless];
 #else
@@ -180,7 +182,7 @@ bool Window::isBorderless() const
 void Window::setBorderless( bool borderless )
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setBorderless:borderless];
 #else
@@ -191,7 +193,7 @@ void Window::setBorderless( bool borderless )
 bool Window::isAlwaysOnTop() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl isAlwaysOnTop];
 #else
@@ -202,7 +204,7 @@ bool Window::isAlwaysOnTop() const
 void Window::setAlwaysOnTop( bool alwaysOnTop )
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl setAlwaysOnTop:alwaysOnTop];
 #else
@@ -213,7 +215,7 @@ void Window::setAlwaysOnTop( bool alwaysOnTop )
 void Window::hide()
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl hide];
 #else
@@ -224,7 +226,7 @@ void Window::hide()
 void Window::show()
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	[mImpl show];
 #else
@@ -235,12 +237,12 @@ void Window::show()
 bool Window::isHidden() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl isHidden];
 #else
 	return mImpl->isHidden();
-#endif	
+#endif
 }
 
 DisplayRef Window::getDisplay() const
@@ -251,13 +253,13 @@ DisplayRef Window::getDisplay() const
 	return [mImpl getDisplay];
 #else
 	return mImpl->getDisplay();
-#endif	
+#endif
 }
 
 RendererRef Window::getRenderer() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl getRenderer];
 #else
@@ -396,7 +398,7 @@ void Window::emitTouchesEnded( TouchEvent *event )
 const std::vector<TouchEvent::Touch>& Window::getActiveTouches() const
 {
 	testValid();
-	
+
 #if defined( CINDER_COCOA )
 	return [mImpl getActiveTouches];
 #elif defined( CINDER_MSW_DESKTOP )
@@ -404,9 +406,9 @@ const std::vector<TouchEvent::Touch>& Window::getActiveTouches() const
 #elif defined( CINDER_UWP )
 	return mImpl->getActiveTouches();
 #elif defined( CINDER_ANDROID )
-	return mImpl->getActiveTouches();	
+	return mImpl->getActiveTouches();
 #elif defined( CINDER_LINUX )
-	return mImpl->getActiveTouches();	
+	return mImpl->getActiveTouches();
 #endif
 }
 
@@ -437,8 +439,8 @@ void Window::emitDraw()
 	getRenderer()->makeCurrentContext( true );
 #else
 	getRenderer()->makeCurrentContext( false );
-#endif	
-	
+#endif
+
 	mSignalDraw.emit();
 	getApp()->draw();
 	mSignalPostDraw.emit();
diff --git a/src/cinder/app/linux/AppImplLinuxGlfw.cpp b/src/cinder/app/linux/AppImplLinuxGlfw.cpp
index 9996720c5..970e804b9 100644
--- a/src/cinder/app/linux/AppImplLinuxGlfw.cpp
+++ b/src/cinder/app/linux/AppImplLinuxGlfw.cpp
@@ -33,10 +33,10 @@ namespace cinder { namespace app {
 
 class GlfwCallbacks {
 public:
-	
+
 	static std::map<GLFWwindow*, std::pair<AppImplLinux*,WindowRef>> sWindowMapping;
 	static bool sCapsLockDown, sNumLockDown, sScrollLockDown;
-		
+
 	static void registerWindowEvents( GLFWwindow *glfwWindow, AppImplLinux* cinderAppImpl, const WindowRef& cinderWindow ) {
 		sWindowMapping[glfwWindow] = std::make_pair( cinderAppImpl, cinderWindow );
 
@@ -187,7 +187,7 @@ public:
 
 			int32_t nativeKeyCode = KeyEvent::translateNativeKeyCode( key );
 			uint32_t char32 = 0;
-			
+
 			if( glfwGetKey( glfwWindow, GLFW_KEY_CAPS_LOCK ) )
 				sCapsLockDown = ! sCapsLockDown;
 			if( glfwGetKey( glfwWindow, GLFW_KEY_NUM_LOCK ) )
@@ -204,7 +204,7 @@ public:
 			}
 			else if( GLFW_RELEASE == action ) {
 				cinderWindow->emitKeyUp( &event );
-			}		
+			}
 		}
 	}
 
@@ -248,10 +248,10 @@ public:
 			if( 0 != initiator ) {
 				MouseEvent event( getWindow(), initiator, (int)mouseX, (int)mouseY, modifiers, 0.0f, 0 );
 				if( GLFW_PRESS == action ) {
-					cinderWindow->emitMouseDown( &event );	
+					cinderWindow->emitMouseDown( &event );
 				}
 				else if( GLFW_RELEASE == action ) {
-					cinderWindow->emitMouseUp( &event );	
+					cinderWindow->emitMouseUp( &event );
 				}
 			}
 		}
@@ -271,7 +271,7 @@ public:
 
 			float wheelDelta = xoffset + yoffset;
 			MouseEvent event( getWindow(), 0, (int)mouseX, (int)mouseY, modifiers, wheelDelta , 0 );
-			cinderWindow->emitMouseWheel( &event );	
+			cinderWindow->emitMouseWheel( &event );
 		}
 	}
 
@@ -310,8 +310,11 @@ AppImplLinux::AppImplLinux( AppLinux *aApp, const AppLinux::Settings &settings )
 
 	mFrameRate = settings.getFrameRate();
 	mFrameRateEnabled = settings.isFrameRateEnabled();
+
+	mHighDensityDisplayEnabled = settings.isHighDensityDisplayEnabled();
+
 	mQuitOnLastWindowClosed = settings.isQuitOnLastWindowCloseEnabled();
-	
+
 	auto formats = settings.getWindowFormats();
 	if( formats.empty() ) {
 		formats.push_back( settings.getDefaultWindowFormat() );
@@ -385,14 +388,14 @@ void AppImplLinux::run()
 
 	// issue initial app activation event
 	mApp->emitDidBecomeActive();
-	
+
 	// isse initial resize revent
 	for( auto &window : mWindows ) {
 		window->resize();
 	}
 
 	// initialize our next frame time
-	mNextFrameTime = getElapsedSeconds();	
+	mNextFrameTime = getElapsedSeconds();
 
 	while( ! mShouldQuit ) {
 		// update and draw
@@ -406,7 +409,7 @@ void AppImplLinux::run()
 		glfwPollEvents();
 
 		// Sleep until the next frame
-		sleepUntilNextFrame();	
+		sleepUntilNextFrame();
 
 		// Check if a window should be closed / destroyed or if we should exit.
 		auto shouldCloseWindow = [ this ] ( WindowImplLinux* window ) {
@@ -467,14 +470,14 @@ WindowRef AppImplLinux::createWindow( Window::Format format )
 void AppImplLinux::quit()
 {
 	for( auto &window : mWindows ) {
-		::glfwSetWindowShouldClose( window->getNative(), true );	
+		::glfwSetWindowShouldClose( window->getNative(), true );
 	}
 	mShouldQuit = true;
 }
 
-float AppImplLinux::getFrameRate() const 
-{ 
-	return mFrameRate; 
+float AppImplLinux::getFrameRate() const
+{
+	return mFrameRate;
 }
 
 void AppImplLinux::setFrameRate( float frameRate )
@@ -494,14 +497,19 @@ bool AppImplLinux::isFrameRateEnabled() const
 	return mFrameRateEnabled;
 }
 
-WindowRef AppImplLinux::getWindow() const 
-{ 
-	return mActiveWindow; 
+bool AppImplLinux::getHighDensityDisplayEnabled() const
+{
+	return mHighDensityDisplayEnabled;
 }
 
-void AppImplLinux::setWindow( WindowRef window ) 
-{ 
-	mActiveWindow = window; 
+WindowRef AppImplLinux::getWindow() const
+{
+	return mActiveWindow;
+}
+
+void AppImplLinux::setWindow( WindowRef window )
+{
+	mActiveWindow = window;
 }
 
 size_t AppImplLinux::getNumWindows() const
@@ -514,7 +522,7 @@ WindowRef AppImplLinux::getWindowIndex( size_t index ) const
 	if( index >= mWindows.size() ) {
 		return cinder::app::WindowRef();
 	}
-	
+
 	auto winIt = mWindows.begin();
 	std::advance( winIt, index );
 	return (*winIt)->mWindowRef;
@@ -542,7 +550,7 @@ void AppImplLinux::showCursor()
 
 ivec2 AppImplLinux::getMousePos() const
 {
-	return mActiveWindow->getImpl()->getMousePos();	
+	return mActiveWindow->getImpl()->getMousePos();
 }
 
 void AppImplLinux::registerWindowEvents( WindowImplLinux* window )
diff --git a/src/cinder/app/linux/PlatformLinux.cpp b/src/cinder/app/linux/PlatformLinux.cpp
index 718b98089..39b3bd758 100644
--- a/src/cinder/app/linux/PlatformLinux.cpp
+++ b/src/cinder/app/linux/PlatformLinux.cpp
@@ -38,6 +38,16 @@
 #include <pwd.h>
 #include <pthread.h>
 
+#include <string>
+#include <sstream>
+
+#include <X11/Xlib.h>
+#include <X11/Xatom.h>
+#include <X11/Xresource.h>
+
+#define NORMAL_DPI 96.0f
+
+
 namespace cinder {
 
 extern void FontManager_destroyStaticInstance();
@@ -65,9 +75,9 @@ PlatformLinux::~PlatformLinux()
 {
 }
 
-PlatformLinux* PlatformLinux::get() 
-{ 
-	return reinterpret_cast<PlatformLinux*>( Platform::get() ); 
+PlatformLinux* PlatformLinux::get()
+{
+	return reinterpret_cast<PlatformLinux*>( Platform::get() );
 }
 
 void PlatformLinux::cleanupLaunch()
@@ -75,19 +85,19 @@ void PlatformLinux::cleanupLaunch()
 	cinder::FontManager_destroyStaticInstance();
 }
 
-DataSourceRef PlatformLinux::loadResource( const fs::path &resourcePath ) 
+DataSourceRef PlatformLinux::loadResource( const fs::path &resourcePath )
 {
 	fs::path fullPath = getResourcePath( resourcePath );
 	if( fullPath.empty() )
 		throw ResourceLoadExc( std::string( "Could not resolve absolute path for: " ) + resourcePath.string() );
 	else
-		return DataSourcePath::create( fullPath );	
+		return DataSourcePath::create( fullPath );
 }
 
-fs::path PlatformLinux::getResourceDirectory() const 
+fs::path PlatformLinux::getResourceDirectory() const
 {
 	// @TODO: Implement
-	return fs::path();	
+	return fs::path();
 }
 
 fs::path PlatformLinux::getResourcePath( const fs::path &rsrcRelativePath ) const
@@ -126,7 +136,7 @@ fs::path PlatformLinux::getResourcePath( const fs::path &rsrcRelativePath ) cons
 			return fullPath;
 	}
 
-	return fs::path(); // empty implies failure	
+	return fs::path(); // empty implies failure
 }
 
 struct DialogHelper {
@@ -166,7 +176,7 @@ struct DialogHelper {
 				ss << " ";
 			}
 		}
-		
+
 		std::string cmd = ss.str();
 		if( ! cmd.empty() ) {
 			FILE* pipe = popen( cmd.c_str(), "r" );
@@ -190,7 +200,7 @@ struct DialogHelper {
 					result = value;
 				}
 			}
-			pclose(pipe);			
+			pclose(pipe);
 		}
 
 		return result;
@@ -324,22 +334,22 @@ struct DialogHelper {
 };
 
 
-fs::path PlatformLinux::getOpenFilePath( const fs::path &initialPath, const std::vector<std::string> &extensions ) 
+fs::path PlatformLinux::getOpenFilePath( const fs::path &initialPath, const std::vector<std::string> &extensions )
 {
 	return DialogHelper::getOpenFilePath( initialPath, extensions );
 }
 
-fs::path PlatformLinux::getFolderPath( const fs::path &initialPath ) 
+fs::path PlatformLinux::getFolderPath( const fs::path &initialPath )
 {
 	return DialogHelper::getFolderPath( initialPath );
 }
 
-fs::path PlatformLinux::getSaveFilePath( const fs::path &initialPath, const std::vector<std::string> &extensions ) 
+fs::path PlatformLinux::getSaveFilePath( const fs::path &initialPath, const std::vector<std::string> &extensions )
 {
 	return DialogHelper::getSaveFilePath( initialPath, extensions );
 }
 
-std::map<std::string, std::string> PlatformLinux::getEnvironmentVariables() 
+std::map<std::string, std::string> PlatformLinux::getEnvironmentVariables()
 {
 	std::map<std::string, std::string> result;
 
@@ -356,21 +366,21 @@ std::map<std::string, std::string> PlatformLinux::getEnvironmentVariables()
 	return result;
 }
 
-fs::path PlatformLinux::expandPath( const fs::path &path ) 
+fs::path PlatformLinux::expandPath( const fs::path &path )
 {
 	fs::path filename = path.filename();
 
 	char actualPath[PATH_MAX];
-	if( ::realpath( path.parent_path().c_str(), actualPath ) ) { 
+	if( ::realpath( path.parent_path().c_str(), actualPath ) ) {
 		fs::path expandedPath = fs::path( std::string( actualPath ) );
 		expandedPath /= filename;
-		return expandedPath;	
-	}   
+		return expandedPath;
+	}
 
-	return fs::path();  
+	return fs::path();
 }
 
-fs::path PlatformLinux::getHomeDirectory() const 
+fs::path PlatformLinux::getHomeDirectory() const
 {
 	fs::path result;
 
@@ -406,7 +416,7 @@ fs::path PlatformLinux::getHomeDirectory() const
 	return result;
 }
 
-fs::path PlatformLinux::getDocumentsDirectory() const 
+fs::path PlatformLinux::getDocumentsDirectory() const
 {
 	fs::path result;
 
@@ -421,7 +431,7 @@ fs::path PlatformLinux::getDocumentsDirectory() const
 	return result;
 }
 
-fs::path PlatformLinux::getDefaultExecutablePath() const 
+fs::path PlatformLinux::getDefaultExecutablePath() const
 {
 	std::vector<char> buf( PATH_MAX );
 	std::memset( &(buf[0]), 0, buf.size()  );
@@ -432,13 +442,13 @@ fs::path PlatformLinux::getDefaultExecutablePath() const
  	return fs::path( std::string( &(buf[0]), len ) ).parent_path();
 }
 
-void PlatformLinux::sleep( float milliseconds ) 
+void PlatformLinux::sleep( float milliseconds )
 {
 	unsigned long sleepMicroSecs = milliseconds*1000L;
-	usleep( sleepMicroSecs );	
+	usleep( sleepMicroSecs );
 }
 
-void PlatformLinux::launchWebBrowser( const Url &url ) 
+void PlatformLinux::launchWebBrowser( const Url &url )
 {
 	pid_t pid = fork();
 
@@ -457,10 +467,10 @@ void PlatformLinux::launchWebBrowser( const Url &url )
 	}
 }
 
-std::vector<std::string> PlatformLinux::stackTrace() 
+std::vector<std::string> PlatformLinux::stackTrace()
 {
 	// @TODO: Implement
-	return std::vector<std::string>();	
+	return std::vector<std::string>();
 }
 
 void PlatformLinux::setThreadName( const std::string &name )
@@ -484,7 +494,7 @@ void PlatformLinux::removeDisplay( const DisplayRef &display )
 {
 	DisplayRef displayCopy = display;
 	mDisplays.erase( std::remove( mDisplays.begin(), mDisplays.end(), displayCopy ), mDisplays.end() );
-				
+
 	if( app::AppBase::get() )
 		app::AppBase::get()->emitDisplayDisconnected( displayCopy );
 }
@@ -518,6 +528,45 @@ DisplayRef PlatformLinux::findDisplayFromGlfwMonitor( GLFWmonitor *monitor )
 #endif
 }
 
+float getDisplayScale() {
+	_XDisplay* display = XOpenDisplay(NULL);
+
+	char *resourceString = XResourceManagerString(display);
+
+	XCloseDisplay(display);
+
+	if (resourceString == NULL) {
+		return 1.0;
+	}
+
+	XrmInitialize(); /* Need to initialize the DB before calling Xrm* functions */
+	XrmDatabase db = XrmGetStringDatabase(resourceString);
+
+	std::istringstream iss(resourceString);
+
+//	CI_LOG_V("Entire DB:");
+//	for (std::string line; std::getline(iss, line); ){
+//		CI_LOG_V("    " + line);
+//	}
+
+	XrmValue value;
+	char* type = NULL;
+	if (!XrmGetResource(db, "Xft.dpi", "String", &type, &value)) {
+		return 1.0;
+	}
+	if (!value.addr) {
+		return 1.0;
+	}
+
+	float dpi = atof(value.addr);
+//	CI_LOG_D("DPI:\t" + std::to_string(dpi));
+
+	float scale = dpi / NORMAL_DPI;
+//	CI_LOG_D("Scale:\t" + std::to_string(scale));
+	return scale;
+}
+
+
 #if ! defined( CINDER_LINUX_EGL_ONLY ) && ! defined( CINDER_HEADLESS )
 void DisplayLinux::displayReconfiguredCallback( GLFWmonitor* monitor, int event )
 {
@@ -527,7 +576,7 @@ void DisplayLinux::displayReconfiguredCallback( GLFWmonitor* monitor, int event
 		if( display )
 			platform->removeDisplay( display ); // this will signal
 		else
-			CI_LOG_W( "Received removed from displayReconfiguredCallback() on unknown display" );		
+			CI_LOG_W( "Received removed from displayReconfiguredCallback() on unknown display" );
 	}
 	else if( event == GLFW_CONNECTED ) {
 		auto display = platform->findDisplayFromGlfwMonitor( monitor );
@@ -539,18 +588,20 @@ void DisplayLinux::displayReconfiguredCallback( GLFWmonitor* monitor, int event
 			ivec2 pos;
 			glfwGetMonitorPos(monitor, &pos.x, &pos.y);
 
-			newDisplay->mArea = Area( pos.x, pos.y, 
+			newDisplay->mArea = Area( pos.x, pos.y,
 				pos.x + size.x, pos.y + size.y );
 
 			newDisplay->mBitsPerPixel = videoMode->redBits + videoMode->greenBits + videoMode->blueBits;
 
 			// TODO: figure out content scaling.
 			//const double dpi = mode->width / (widthMM / 25.4);
-			newDisplay->mContentScale = 1.0;
+
+			newDisplay->mContentScale = getDisplayScale();
+
 			platform->addDisplay( DisplayRef( newDisplay ) ); // this will signal
 		}
 		else
-			CI_LOG_W( "Received add from displayReconfiguredCallback() for already known display" );				
+			CI_LOG_W( "Received add from displayReconfiguredCallback() for already known display" );
 	}
 }
 
@@ -558,7 +609,7 @@ const std::vector<DisplayRef>& app::PlatformLinux::getDisplays()
 {
 	auto glfwInitialized = ::glfwInit();
 	if( ! mDisplaysInitialized && glfwInitialized ) {
-		// this is our first call; register a callback with CoreGraphics for any 
+		// this is our first call; register a callback with CoreGraphics for any
 		// display changes. Note that this only works with a run loop
 		::glfwSetMonitorCallback( DisplayLinux::displayReconfiguredCallback );
 		int32_t numMonitors, nonPrimaryIndex = 1;
@@ -568,7 +619,7 @@ const std::vector<DisplayRef>& app::PlatformLinux::getDisplays()
 		for( size_t i = 0; i < numMonitors; ++i ) {
 			GLFWmonitor *monitor = monitors[i];
 			auto newDisplay = std::make_shared<DisplayLinux>();
-			
+
 			const auto *videoMode = ::glfwGetVideoMode( monitor );
 			auto size = ivec2( videoMode->width, videoMode->height );
 			ivec2 pos;
@@ -579,7 +630,7 @@ const std::vector<DisplayRef>& app::PlatformLinux::getDisplays()
 
 			// TODO: figure out content scaling.
 			//const double dpi = mode->width / (widthMM / 25.4);
-			newDisplay->mContentScale = 1.0f;
+			newDisplay->mContentScale = getDisplayScale();
 			newDisplay->mMonitor = monitor;
 			if( mainScreen == monitor )
 				mDisplays[0] = std::move( newDisplay );
@@ -587,9 +638,9 @@ const std::vector<DisplayRef>& app::PlatformLinux::getDisplays()
 				mDisplays[nonPrimaryIndex++] = std::move( newDisplay );
 		}
 
-		mDisplaysInitialized = true;	
+		mDisplaysInitialized = true;
 	}
-	
+
 	return mDisplays;
 }
 #else // EGL
diff --git a/src/cinder/app/linux/WindowImplLinuxGlfw.cpp b/src/cinder/app/linux/WindowImplLinuxGlfw.cpp
index 269aa85ab..d7fb70f7c 100644
--- a/src/cinder/app/linux/WindowImplLinuxGlfw.cpp
+++ b/src/cinder/app/linux/WindowImplLinuxGlfw.cpp
@@ -34,7 +34,7 @@ WindowImplLinux::WindowImplLinux( const Window::Format &format, WindowImplLinux
 {
 	mFullScreen = format.isFullScreen();
 	mDisplay = format.getDisplay();
-	
+
 	if( ! mDisplay )
 		mDisplay = Display::getMainDisplay();
 
@@ -51,20 +51,20 @@ WindowImplLinux::WindowImplLinux( const Window::Format &format, WindowImplLinux
 	::glfwWindowHint( GLFW_CLIENT_API, GLFW_OPENGL_ES_API );
   #if CINDER_GL_ES_VERSION >= CINDER_GL_ES_VERSION_3_2
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 3 );
-	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 2 );	
-	std::cout << "Rendering with OpenGL ES 3.2" << std::endl;		
+	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 2 );
+	std::cout << "Rendering with OpenGL ES 3.2" << std::endl;
   #elif CINDER_GL_ES_VERSION >= CINDER_GL_ES_VERSION_3_1
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 3 );
-	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 1 );	
-	std::cout << "Rendering with OpenGL ES 3.1" << std::endl;	
+	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 1 );
+	std::cout << "Rendering with OpenGL ES 3.1" << std::endl;
   #elif CINDER_GL_ES_VERSION >= CINDER_GL_ES_VERSION_3
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 3 );
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 0 );
-	std::cout << "Rendering with OpenGL ES 3.0" << std::endl;	
+	std::cout << "Rendering with OpenGL ES 3.0" << std::endl;
   #elif CINDER_GL_ES_VERSION >= CINDER_GL_ES_VERSION_2
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 2 );
 	::glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 0 );
-	std::cout << "Rendering with OpenGL ES 2.0" << std::endl;	
+	std::cout << "Rendering with OpenGL ES 2.0" << std::endl;
   #endif
 
 #else // Desktop
@@ -77,7 +77,7 @@ WindowImplLinux::WindowImplLinux( const Window::Format &format, WindowImplLinux
 		std::cout << "Rendering with OpenGL Core Profile " << majorVersion << "." << minorVersion << std::endl;
 	}
 	else {
-		std::cout << "Rendering with OpenGL " << majorVersion << "." << minorVersion << std::endl;		
+		std::cout << "Rendering with OpenGL " << majorVersion << "." << minorVersion << std::endl;
 	}
 	if( options.getDebug() )
 		::glfwWindowHint( GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE );
@@ -139,7 +139,7 @@ ivec2 WindowImplLinux::getSize() const
 {
 	int xsize, ysize;
 	::glfwGetWindowSize( mGlfwWindow, &xsize, &ysize );
-	return ivec2( xsize, ysize );	
+	return ivec2( xsize, ysize );
 }
 
 void WindowImplLinux::setSize( const ivec2 &size )
@@ -155,10 +155,14 @@ ivec2 WindowImplLinux::getPos() const
 }
 
 void WindowImplLinux::setPos( const ivec2 &pos )
-{	
+{
 	::glfwSetWindowPos( mGlfwWindow, pos.x, pos.y );
 }
 
+float WindowImplLinux::getContentScale() const {
+	return ( mAppImpl->getHighDensityDisplayEnabled() ) ? mDisplay->getContentScale() : 1.0f;
+}
+
 void WindowImplLinux::close()
 {
 }
@@ -186,13 +190,13 @@ const std::vector<TouchEvent::Touch>& WindowImplLinux::getActiveTouches() const
 void WindowImplLinux::setBorderless( bool borderless )
 {
 	CI_LOG_W( "Window::setBorderless() currently unimplemented in GLFW" );
-	// TODO: Find a way to do this w/o recreating 
+	// TODO: Find a way to do this w/o recreating
 }
 
 void WindowImplLinux::setAlwaysOnTop( bool alwaysOnTop )
 {
 	CI_LOG_W( "Window::setAlwaysOnTop() currently unimplemented in GLFW" );
-	// TODO: Find a way to do this w/o recreating 
+	// TODO: Find a way to do this w/o recreating
 }
 
 void WindowImplLinux::keyDown( const KeyEvent &event )
diff --git a/src/cinder/app/linux/WindowImplLinuxRpi.cpp b/src/cinder/app/linux/WindowImplLinuxRpi.cpp
index 21d4ae94b..2dead1c10 100644
--- a/src/cinder/app/linux/WindowImplLinuxRpi.cpp
+++ b/src/cinder/app/linux/WindowImplLinuxRpi.cpp
@@ -100,6 +100,10 @@ void WindowImplLinux::setPos( const ivec2 &pos )
 	/*Not implemented*/
 }
 
+float WindowImplLinux::getContentScale() const {
+	return ( mAppImpl->getHighDensityDisplayEnabled() ) ? mDisplay->getContentScale() : 1.0f;
+}
+
 void WindowImplLinux::close()
 {
 	/*Not implemented*/
diff --git a/src/cinder/params/Params.cpp b/src/cinder/params/Params.cpp
index 58c99e072..7cd8048a9 100644
--- a/src/cinder/params/Params.cpp
+++ b/src/cinder/params/Params.cpp
@@ -23,6 +23,7 @@
 #include "cinder/app/AppBase.h"
 #include "cinder/params/Params.h"
 #include "cinder/Utilities.h"
+//#include "cinder/Log.h"
 
 #include "AntTweakBar.h"
 
@@ -75,7 +76,7 @@ namespace {
 void pushGlState()
 {
 	auto ctx = gl::context();
-	
+
 	ctx->pushGlslProg();
 	ctx->pushViewport();
 	ctx->pushScissor();
@@ -98,7 +99,7 @@ void pushGlState()
 void popGlState()
 {
 	auto ctx = gl::context();
-	
+
 	ctx->popBoolState( GL_CULL_FACE, true );
 	ctx->popBoolState( GL_BLEND, true );
 	ctx->popBoolState( GL_DEPTH_TEST, true );
@@ -116,17 +117,17 @@ void popGlState()
 	ctx->popScissor( true );
 	ctx->popViewport( true );
 	ctx->popGlslProg( true );
-	
+
 	ctx->restoreInvalidatedVao();
 	ctx->restoreInvalidatedBufferBinding( GL_ARRAY_BUFFER );
-	ctx->restoreInvalidatedBufferBinding( GL_ELEMENT_ARRAY_BUFFER );	
+	ctx->restoreInvalidatedBufferBinding( GL_ELEMENT_ARRAY_BUFFER );
 }
 } // anonymous namespace
 
 void mouseDown( int twWindowId, app::MouseEvent &event )
 {
 	pushGlState();
-	
+
 	TwSetCurrentWindow( twWindowId );
 
 	TwMouseButtonID button;
@@ -137,7 +138,7 @@ void mouseDown( int twWindowId, app::MouseEvent &event )
 	else
 		button = TW_MOUSE_MIDDLE;
 	event.setHandled( TwMouseButton( TW_MOUSE_PRESSED, button ) != 0 );
-	
+
 	popGlState();
 }
 
@@ -145,7 +146,7 @@ void mouseUp( int twWindowId, app::MouseEvent &event )
 {
 	auto oldCtx = gl::context();
 	pushGlState();
-	
+
 	TwSetCurrentWindow( twWindowId );
 
 	TwMouseButtonID button;
@@ -156,10 +157,10 @@ void mouseUp( int twWindowId, app::MouseEvent &event )
 	else
 		button = TW_MOUSE_MIDDLE;
 	event.setHandled( TwMouseButton( TW_MOUSE_RELEASED, button ) != 0 );
-	
+
 	// The button handler may have tweaked the current GL context, in which case, let's force it back to what it was
 	oldCtx->makeCurrent( true );
-	
+
 	popGlState();
 }
 
@@ -179,14 +180,16 @@ void mouseWheel( int twWindowId, app::MouseEvent &event )
 void mouseMove( weak_ptr<app::Window> winWeak, int twWindowId, app::MouseEvent &event )
 {
 	pushGlState();
-	
+
 	TwSetCurrentWindow( twWindowId );
 
 	auto win = winWeak.lock();
 	if( win ) {
-		event.setHandled( TwMouseMotion( win->toPixels( event.getX() ), win->toPixels( event.getY() ) ) != 0 );
+//		event.setHandled( TwMouseMotion( win->toPixels( event.getX() ), win->toPixels( event.getY() ) ) != 0 );
+		event.setHandled( TwMouseMotion( event.getX() , event.getY() ) != 0 );
+
 	}
-	
+
 	popGlState();
 }
 
@@ -220,8 +223,9 @@ void resize( weak_ptr<app::Window> winWeak, int twWindowId )
 
 	auto win = winWeak.lock();
 	if( win )
-		TwWindowSize( win->toPixels( win->getWidth() ), win->toPixels( win->getHeight() ) );
-		
+//		TwWindowSize( win->toPixels( win->getWidth() ), win->toPixels( win->getHeight() ) );
+		TwWindowSize( win->getWidth() , win->getHeight() );
+
 	popGlState();
 }
 
@@ -235,18 +239,20 @@ class AntMgr {
   public:
 	AntMgr( int fontScale ) {
 		// we have to do a fontscale set *before* TwInit:
-		if( fontScale > 1 )
+		if( fontScale > 1 ) {
+//			CI_LOG_V(string(" GLOBAL fontscaling= ") + toString( fontScale ));
 			TwDefine( (string(" GLOBAL fontscaling= ") + toString( fontScale )).c_str() );
+		}
 #if defined( USE_DIRECTX )
 		if( ! TwInit( TW_DIRECT3D11, dx::getDxRenderer()->md3dDevice ) )
 			throw Exception();
 #else
 		if( ! TwInit( TW_OPENGL_CORE, NULL ) ) {
 			throw Exception();
-		}		
+		}
 #endif
 	}
-	
+
 	~AntMgr() {
 		TwTerminate();
 	}
@@ -311,6 +317,7 @@ int initAntGl( weak_ptr<app::Window> winWeak )
 	auto win = winWeak.lock();
 	if( ! sMgr )
 		sMgr = std::shared_ptr<AntMgr>( new AntMgr( (int)win->getContentScale() ) );
+//	CI_LOG_V((int)win->getContentScale());
 	app::Window *winPtr = win.get();
 	auto it = sWindowIds.find( winPtr );
 	if( it == sWindowIds.end() )
@@ -350,18 +357,20 @@ void InterfaceGl::init( app::WindowRef window, const std::string &title, const i
 	gl::context()->restoreInvalidatedVao();
 	gl::context()->restoreInvalidatedBufferBinding( GL_ARRAY_BUFFER );
 	gl::context()->restoreInvalidatedBufferBinding( GL_ELEMENT_ARRAY_BUFFER );
-	
+
 	TwSetCurrentWindow( mTwWindowId );
-		
+
 	mWindow = window;
 
 	mBar = std::shared_ptr<TwBar>( TwNewBar( title.c_str() ), std::bind( tweakBarDeleter, mTwWindowId, std::placeholders::_1 ) );
-	TwWindowSize( window->toPixels( window->getWidth() ), window->toPixels( window->getHeight() ) );
+//	TwWindowSize( window->toPixels( window->getWidth() ), window->toPixels( window->getHeight() ) );
+	TwWindowSize(  window->getWidth() ,  window->getHeight() );
+
 	char optionsStr[1024];
 	sprintf( optionsStr, "`%s` size='%d %d' color='%d %d %d' alpha=%d", title.c_str(), size.x, size.y, (int)(color.r * 255), (int)(color.g * 255), (int)(color.b * 255), (int)(color.a * 255) );
 	TwDefine( optionsStr );
-	
-	TwCopyStdStringToClientFunc( implStdStringToClient );	
+
+	TwCopyStdStringToClientFunc( implStdStringToClient );
 
 	window->getSignalMouseDown().connect( std::bind( mouseDown, mTwWindowId, std::placeholders::_1 ) );
 	window->getSignalMouseUp().connect( std::bind( mouseUp, mTwWindowId, std::placeholders::_1 ) );
@@ -386,7 +395,7 @@ void InterfaceGl::draw()
 void InterfaceGl::show( bool visible )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	int32_t visibleInt = ( visible ) ? 1 : 0;
 	TwSetParam( mBar.get(), NULL, "visible", TW_PARAM_INT32, 1, &visibleInt );
 }
@@ -399,16 +408,16 @@ void InterfaceGl::hide()
 bool InterfaceGl::isVisible() const
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	int32_t visibleInt;
 	TwGetParam( mBar.get(), NULL, "visible", TW_PARAM_INT32, 1, &visibleInt );
 	return visibleInt != 0;
 }
-	
+
 void InterfaceGl::maximize( bool maximized )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	int32_t maximizedInt = ( maximized ) ? 0 : 1;
 	TwSetParam( mBar.get(), NULL, "iconified", TW_PARAM_INT32, 1, &maximizedInt );
 }
@@ -421,7 +430,7 @@ void InterfaceGl::minimize()
 bool InterfaceGl::isMaximized() const
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	int32_t maximizedInt;
 	TwGetParam( mBar.get(), NULL, "iconified", TW_PARAM_INT32, 1, &maximizedInt );
 	return maximizedInt == 0;
@@ -501,7 +510,7 @@ void InterfaceGl::OptionsBase::setStep( float stepVal )
 void InterfaceGl::OptionsBase::setPrecision( int precVal )
 {
 	assert( mParent );
-	
+
 	string optionsStr = "precision=" + to_string( precVal );
 	mParent->setOptions( getName(), optionsStr );
 
@@ -594,7 +603,7 @@ void InterfaceGl::OptionsBase::reAddOptions()
 void InterfaceGl::implAddParamDeprecated( const std::string &name, void *param, int type, const std::string &optionsStr, bool readOnly )
 {
 	TwSetCurrentWindow( mTwWindowId );
-		
+
 	if( readOnly )
 		TwAddVarRO( mBar.get(), name.c_str(), (TwType)type, param, optionsStr.c_str() );
 	else
@@ -604,42 +613,42 @@ void InterfaceGl::implAddParamDeprecated( const std::string &name, void *param,
 void InterfaceGl::addParam( const std::string &name, bool *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_BOOLCPP, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, float *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_FLOAT, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, double *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_DOUBLE, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, int32_t *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_INT32, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, vec3 *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_DIR3F, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, quat *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_QUAT4F, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, Color *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_COLOR3F, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, ColorA *param, const std::string &optionsStr, bool readOnly )
 {
 	implAddParamDeprecated( name, param, TW_TYPE_COLOR4F, optionsStr, readOnly );
-} 
+}
 
 void InterfaceGl::addParam( const std::string &name, std::string *param, const std::string &optionsStr, bool readOnly )
 {
@@ -703,21 +712,21 @@ InterfaceGl::Options<int> InterfaceGl::addParam( const std::string &name, const
 void InterfaceGl::addSeparator( const std::string &name, const std::string &optionsStr )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	TwAddSeparator( mBar.get(), name.c_str(), optionsStr.c_str() );
 }
 
 void InterfaceGl::addText( const std::string &name, const std::string &optionsStr )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	TwAddButton( mBar.get(), name.c_str(), NULL, NULL, optionsStr.c_str() );
 }
 
 void InterfaceGl::addButton( const std::string &name, const std::function<void ()> &callback, const std::string &optionsStr )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	auto callbackPtr = std::make_shared<std::function<void ()>>( callback );
 	mStoredCallbacks.insert( make_pair( name, callbackPtr ) );
 
@@ -743,7 +752,7 @@ void InterfaceGl::clear()
 void InterfaceGl::setOptions( const std::string &name, const std::string &optionsStr )
 {
 	TwSetCurrentWindow( mTwWindowId );
-	
+
 	std::string target = "`" + (std::string)TwGetBarName( mBar.get() ) + "`";
 	if( ! name.empty() )
 		target += "/`" + name + "`";
-- 
2.19.1

